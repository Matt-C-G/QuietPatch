Metadata-Version: 2.4
Name: quietpatch
Version: 0.2.2
Summary: Vulnerability scanner for installed applications
Requires-Python: <3.12,>=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyYAML==6.0.2
Requires-Dist: charset-normalizer==3.4.3
Requires-Dist: requests==2.32.3
Requires-Dist: cryptography>=42
Provides-Extra: test
Requires-Dist: pytest>=8.2; extra == "test"
Requires-Dist: PyYAML==6.0.2; extra == "test"
Requires-Dist: cryptography==43.0.1; extra == "test"
Requires-Dist: cffi>=1.16.0; extra == "test"
Dynamic: license-file

# QuietPatch üîê

QuietPatch is a lightweight, privacy-first vulnerability scanner with an action engine and policy engine. It maps the software on a host to known CVEs and produces a clean, searchable HTML report with actionable remediation‚Äîoffline-first, cross-platform, and without privilege escalation.

  ‚ö†Ô∏è QuietPatch never auto-patches or changes your system. All remediation commands shown   in the report are suggestions for human review.

# ‚ú® Highlights

Offline-first: ship an encrypted, signed CVE DB snapshot; scan with zero network calls

Action engine: per-app remediation (Homebrew / MAU / vendor pages / package managers)

Policy engine: filter by min severity, treat-unknown-as, KEV/EPSS sort, deterministic output

Cross-platform runners: single-file PEX for macOS, Linux, Windows

Enterprise-friendly: systemd / launchd / Task Scheduler unit templates

Security: encrypted config, SBOM + third-party notices, sensible timeouts, no secrets in repo

# üöÄ Quickstart (binaries)

Grab assets from the latest GitHub Release. Each OS has a runner and an optional offline DB snapshot:

macOS (Apple Silicon & Intel): quietpatch-<ver>-macos-pex.tar.gz + db-YYYYMMDD.tar.zst (recommended)

Linux x64: quietpatch-linux-x64.pex + db-YYYYMMDD.tar.zst (recommended)

Windows x64: quietpatch-windows-x64.zip + db-YYYYMMDD.tar.zst (recommended)

‚úÖ Always verify checksums (*.sha256) before running.

# **macOS**
```bash
# 1) Download runner + checksum
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/quietpatch-0.2.1-macos-pex.tar.gz
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/quietpatch-0.2.1-macos-pex.tar.gz.sha256

# 2) Verify
shasum -a 256 -c quietpatch-0.2.1-macos-pex.tar.gz.sha256

# 3) Extract & remove quarantine (if present)
tar -xzf quietpatch-0.2.1-macos-pex.tar.gz
xattr -cr quietpatch-macos.pex || true

# 4) (Optional) Offline DB
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst.sha256
shasum -a 256 -c db-20250823.tar.zst.sha256

# 5) One-shot scan ‚Üí HTML ‚Üí auto-open (fully offline)
QP_OFFLINE=1 QP_DISABLE_AUTO_SYNC=1 \
  ./quietpatch-macos.pex scan --db ./db-20250823.tar.zst --also-report --open
```

# **Linux (x64)**
```Bash 
# 1) Download
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/quietpatch-linux-x64.pex
chmod +x quietpatch-linux-x64.pex

# 2) (Optional) Offline DB
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst
curl -LO https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst.sha256
sha256sum -c db-20250823.tar.zst.sha256

# 3) Run (offline)
QP_OFFLINE=1 QP_DISABLE_AUTO_SYNC=1 \
  ./quietpatch-linux-x64.pex scan --db ./db-20250823.tar.zst --also-report --open
```

# **Windows (PowerShell, x64)**
```powershell 
# 1) Download + extract
Invoke-WebRequest -Uri https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/quietpatch-windows-x64.zip -OutFile quietpatch-windows-x64.zip
Expand-Archive quietpatch-windows-x64.zip -DestinationPath .\quietpatch

# 2) (Optional) Offline DB + verify
Invoke-WebRequest -Uri https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst -OutFile .\quietpatch\db-20250823.tar.zst
Invoke-WebRequest -Uri https://github.com/Matt-C-G/QuietPatch/releases/download/v0.2.1/db-20250823.tar.zst.sha256 -OutFile .\quietpatch\db-20250823.tar.zst.sha256
if ((Get-FileHash .\quietpatch\db-20250823.tar.zst -Algorithm SHA256).Hash -ne
    (Get-Content .\quietpatch\db-20250823.tar.zst.sha256).Split()[0]) { throw "DB checksum mismatch!" }

# 3) Run (offline)
$env:QP_OFFLINE = "1"
$env:QP_DISABLE_AUTO_SYNC = "1"
.\quietpatch\quietpatch.exe scan --db .\quietpatch\db-20250823.tar.zst --also-report --open
```
The scanner writes report.html next to your working directory and opens it with --open. Omit --open for unattended runs (services/cron).

# üß† **What you'll see**

The HTML report includes:

  **App / Version**

  **Action** ‚Äì concrete remediation (e.g., brew upgrade, MAU path, vendor link)

  **CVE** (with KEV badge), CVSS, Severity

  **EPSS & Summary**

  ‚ÄúAll CVEs‚Äù section with per-CVE detail, sorted deterministically (KEV promoted on ties)

# ‚öôÔ∏è **Policy (config/policy.yml)**
```yaml
allow: []
deny:  []
min_severity: low           # low | medium | high | critical
treat_unknown_as: low       # map "unknown" to this floor
only_with_cves: true        # drop apps with no CVEs
limit_per_app: 50
```

# üîí **Security & Privacy**

**Offline-first** database snapshot (recommended)

**No auto-patching;** commands are suggestions

**Deterministic output:** stable sorting & rollups

**SBOM:** sbom.spdx.json, dependencies recorded in THIRD_PARTY_NOTICES.json

**No secrets in repo;** encrypted config supported if you integrate NVD API online mode later

# üñ•Ô∏è **Service install (optional)**

Templates are provided to schedule recurring scans:

**macOS (launchd):** /Library/LaunchDaemons/com.quietpatch.agent.plist

**Linux (systemd):** /etc/systemd/system/quietpatch.service

**Windows (Task Scheduler):** XML template

Each service runs the platform runner with:
```ini
QP_OFFLINE=1 QP_DISABLE_AUTO_SYNC=1 <runner> scan --db <db-snapshot> --also-report
```
Use --open only for interactive sessions (not for background services).

# üß™ **Validate your build**
```bash
# From repo root
python3 tools/selfcheck.py
# Ensures structure, policy behavior, KEV/EPSS sorting, basic integrity.
```
Run unit tests when developing:
```bash
python3 -m pytest -q
bandit -q -r src
```
# üõ†Ô∏è **Build from source (optional)**
```bash
git clone https://github.com/Matt-C-G/QuietPatch.git
cd QuietPatch
python3 -m venv .venv && source .venv/bin/activate
pip install -r requirements.txt

# Run from source
PYTHONPATH=. python3 qp_cli.py scan --also-report --open
```
For production, prefer the release runners and offline DB.

# ‚ùì **FAQ**

**Does QuietPatch need internet?**

No, if you provide the offline DB snapshot (db-YYYYMMDD.tar.zst). If you enable online sync later, only the feeds are downloaded; no host inventory leaves the machine.

**Does it change my system?**

No. QuietPatch is read-only. It suggests commands you may run manually.

**What about unknown severities?**

They‚Äôre mapped via treat_unknown_as and CVSS where available; ordering is deterministic and KEV-aware.

# üìÑ **License & Notices**

License: MIT (see LICENSE)

SBOM: sbom.spdx.json

Third-party notices: THIRD_PARTY_NOTICES.json

# üôè **Acknowledgments**

NIST NVD CVE data

CISA KEV Catalog

FIRST EPSS

# **Pro tips**
Keep your **DB snapshot** fresh (attach a signed one to every release).

For enterprise rollout, use the provided launchd/systemd/Task Scheduler templates.

Use --also-report to always emit report.html. Add --open for interactive runs.
