name: Publish Release

on:
  push:
    tags: ['v*']            # only tags like v0.4.2
  release:
    types: [published]      # when you click "Publish release"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g. v0.4.2)'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: publish-${{ github.event.release.tag_name || github.ref_name || inputs.tag || github.sha }}
  cancel-in-progress: false

jobs:
  build_upload:
    # safety: never run on plain branch pushes
    if: >
      github.event_name == 'release' ||
      startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    env:
      PYVER: "3.12"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_constraints: constraints/build-linux-py312.txt
            runtime_constraints: constraints/runtime-linux-py312.txt
          - os: macos-latest
            build_constraints: constraints/build-macos-py312.txt
            runtime_constraints: constraints/runtime-macos-py312.txt
          - os: windows-latest
            build_constraints: constraints/build-windows-py312.txt
            runtime_constraints: constraints/runtime-windows-py312.txt

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Debug event
        run: |
          echo "EVENT=${{ github.event_name }}"
          echo "REF=${{ github.ref }}"
          echo "REF_NAME=${{ github.ref_name }}"
          echo "REL_TAG=${{ github.event.release.tag_name || '' }}"
          echo "DISPATCH_TAG=${{ inputs.tag || '' }}"

      - name: Resolve tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          tag=""
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            tag="${{ github.event.release.tag_name }}"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && -n "${{ inputs.tag }}" ]]; then
            tag="${{ inputs.tag }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            tag="${GITHUB_REF#refs/tags/}"
          fi
          if [[ -z "$tag" ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "TAG=$tag" >> "$GITHUB_ENV"
          echo "Resolved tag: $tag"

      - uses: actions/setup-python@v5
        if: steps.tag.outputs.skip != 'true'
        with: { python-version: ${{ env.PYVER }} }

      - name: Pin pip
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install --upgrade "pip<25"

      - name: Install build deps (toolchain, no hashes)
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install -r ${{ matrix.build_constraints }}

      - name: Install runtime deps (hermetic)
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install -r ${{ matrix.runtime_constraints }}

      - name: Build wheel & sdist
        if: steps.tag.outputs.skip != 'true'
        run: |
          python -m build -w -s
          ls -l dist

      - name: Smoke test in fresh venv
        if: steps.tag.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          python -m venv venv
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PY=venv/Scripts/python.exe
            PIP=venv/Scripts/pip.exe
          else
            PY=venv/bin/python
            PIP=venv/bin/pip
          fi
          $PIP install -r ${{ matrix.runtime_constraints }}
          WHL=$($PY - <<'PY'
import glob; print(sorted(glob.glob('dist/*.whl'))[0])
PY
)
          $PIP install "$WHL"
          $PY - <<'PY'
import quietpatch; print("quietpatch version:", getattr(quietpatch, "__version__", "unknown"))
PY
          command -v quietpatch >/dev/null 2>&1 && quietpatch --help >/dev/null || echo "CLI not present"

      - name: SHA256SUMS.txt
        if: steps.tag.outputs.skip != 'true'
        run: |
          python - <<'PY'
import hashlib, pathlib
out = pathlib.Path("SHA256SUMS.txt")
with out.open("w") as f:
    for p in sorted(pathlib.Path("dist").glob("*")):
        f.write(f"{hashlib.sha256(p.read_bytes()).hexdigest()}  {p}\n")
print(out.read_text())
PY

      - name: Upload to GitHub Release
        if: steps.tag.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          fail_on_unmatched_files: true
          files: |
            dist/*.whl
            dist/*.tar.gz
            SHA256SUMS.txt
