name: ci
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PY_VER: "3.11"
  QP_OFFLINE: "1"

jobs:
  lint:
    name: lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"
      - name: Install ruff (pinned) with retry
        run: |
          set -eux
          python -m pip install -r requirements.ci.txt
          python -m ruff --version
      - name: Run ruff
        run: |
          ruff check . --fix || true
          ruff format . || true
        env:
          # keep lint fast/sane
          RUFF_CACHE_DIR: .ruff_cache

  unit:
    name: unit
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"
      - name: Install project + test deps
        run: |
          set -eux
          python -m pip install -r requirements.ci.txt
          python -m pip install -e .
      - name: Run tests
        run: pytest -q

      - name: Zero-unknowns gate (mock, offline, capped)
        shell: bash
        run: |
          set -euo pipefail

          workdir="$(mktemp -d)"
          sarif="$workdir/gate.sarif"

          echo "Running quietpatch scan (mock) → SARIF only…"
          if ! timeout 90s quietpatch scan --mock --offline --fail-unknowns --sarif "$sarif"; then
            echo "::error::Scan failed or exceeded 90s. Failing fast."; exit 1
          fi

          if [ ! -s "$sarif" ]; then
            echo "::error::No SARIF produced by quietpatch"; exit 1
          fi

          echo "Zero-unknowns gate passed ✅"

  build-linux:
    name: build-linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"
      - name: Install with constraints (hermetic)
        run: |
          python -m pip install --upgrade pip
          # Use platform-specific constraints
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            CONSTRAINT_FILE="constraints/runtime-linux-py312.txt"
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            CONSTRAINT_FILE="constraints/runtime-macos-py312.txt"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CONSTRAINT_FILE="constraints/runtime-windows-py312.txt"
          else
            CONSTRAINT_FILE="constraints.txt"
          fi
          python -m pip install --require-hashes -r $CONSTRAINT_FILE
          python -m pip install wheel build pex setuptools
      - name: Build wheel
        run: |
          python -m build -w -n
          ls -l dist/*.whl
      - name: Build PEX from local wheel (deps from PyPI)
        run: |
          python -m pip install -U pex
          mkdir -p dist-pex
          python -m pex dist/*.whl \
            -c quietpatch \
            --find-links dist \
            --validate-entry-point --no-build \
            --venv prepend --strip-pex-env \
            -o dist-pex/quietpatch-linux-x86_64-py311.pex
      - name: Install built wheel for gate
        run: |
          python -m pip install --no-deps --force-reinstall dist/quietpatch-*.whl

      - name: Gate (mock scan with timeout)
        env:
          QP_OFFLINE: "1"
        run: |
          set -euo pipefail
          timeout 90s python -m quietpatch.cli scan --mock --offline --fail-unknowns --sarif out.sarif --ci || {
            echo "Gate step timed out or failed"
            exit 1
          }
          # Verify SARIF exists and is valid
          if [ ! -f out.sarif ] || [ ! -s out.sarif ]; then
            echo "Error: SARIF file missing or empty"
            exit 1
          fi
          echo "SARIF file size: $(wc -c < out.sarif) bytes"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: out.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: quietpatch-linux
          path: dist-pex/*

  build-windows:
    name: build-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", architecture: "x64", cache: "pip" }

      - name: Install with constraints (hermetic)
        shell: pwsh
        run: |
          py -3.11 -m pip install --upgrade pip
          py -3.11 -m pip install --require-hashes -r constraints.txt
          py -3.11 -m pip install wheel build pex setuptools

      - name: Build wheel
        shell: pwsh
        run: |
          py -3.11 -m build -w -n
          Get-ChildItem dist\*.whl | Format-List

      - name: Build PEX from local wheel (deps from PyPI)
        shell: pwsh
        env:
          PEX_IGNORE_RCFILES: '1'
        run: |
          py -3.11 -m pip install pex==2.54.2
          New-Item -ItemType Directory -Force -Path dist-pex | Out-Null
          $whl = (Get-ChildItem dist\*.whl | Select-Object -First 1).FullName
          py -3.11 -m pex $whl `
            -c quietpatch `
            --find-links dist `
            --no-build `
            --strip-pex-env `
            -o dist-pex\quietpatch-win-py311.pex

      - name: Install built wheel for gate
        shell: pwsh
        run: |
          py -3.11 -m pip install dist\*.whl --force-reinstall

      - name: Gate (mock scan with timeout)
        shell: pwsh
        env:
          QP_OFFLINE: "1"
        run: |
          $p = Start-Process -FilePath "py" -ArgumentList "-3.11", "-m", "quietpatch.cli", "scan", "--mock", "--offline", "--fail-unknowns", "--sarif", "out.sarif", "--ci" -PassThru -NoNewWindow
          if (-not $p.WaitForExit(90000)) { $p.Kill(); throw "Gate timed out (>90s)" }
          if ($p.ExitCode -ne 0) { throw "Gate failed with code $($p.ExitCode)" }
          # Verify SARIF exists and is valid
          if (-not (Test-Path "out.sarif") -or (Get-Item "out.sarif").Length -eq 0) {
            throw "SARIF file missing or empty"
          }
          Write-Host "SARIF file size: $((Get-Item 'out.sarif').Length) bytes"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: out.sarif

      - uses: actions/upload-artifact@v4
        with: { name: quietpatch-windows, path: dist-pex/* }

  build-macos:
    name: build-macos
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"
      - name: Install with constraints (hermetic)
        run: |
          python -m pip install --upgrade pip
          # Use platform-specific constraints
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            CONSTRAINT_FILE="constraints/runtime-linux-py312.txt"
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            CONSTRAINT_FILE="constraints/runtime-macos-py312.txt"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CONSTRAINT_FILE="constraints/runtime-windows-py312.txt"
          else
            CONSTRAINT_FILE="constraints.txt"
          fi
          python -m pip install --require-hashes -r $CONSTRAINT_FILE
          python -m pip install wheel build pex setuptools
      - name: Build wheel
        run: |
          python -m build -w -n
          ls -l dist/*.whl
      - name: Build PEX from local wheel (deps from PyPI)
        run: |
          python -m pip install -U pex
          mkdir -p dist-pex
          python -m pex dist/*.whl \
            -c quietpatch \
            --find-links dist \
            --validate-entry-point --no-build \
            --venv prepend --strip-pex-env \
            -o dist-pex/quietpatch-macos-arm64-py311.pex
      - name: Install built wheel for gate
        run: |
          python -m pip install --no-deps --force-reinstall dist/quietpatch-*.whl

      - name: Gate (mock scan with timeout - macOS)
        env:
          QP_OFFLINE: "1"
        run: |
          python - <<'PY'
          import subprocess, sys, time
          p = subprocess.Popen(["python3.11", "-m", "quietpatch.cli", "scan", "--mock", "--offline", "--fail-unknowns", "--sarif", "out.sarif", "--ci"])
          for _ in range(90):
              if p.poll() is not None: 
                  sys.exit(p.returncode)
              time.sleep(1)
          p.kill()
          sys.exit(1)
          PY
          # Verify SARIF exists and is valid
          if [ ! -f out.sarif ] || [ ! -s out.sarif ]; then
            echo "Error: SARIF file missing or empty"
            exit 1
          fi
          echo "SARIF file size: $(wc -c < out.sarif) bytes"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: out.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: quietpatch-macos
          path: dist-pex/*