name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish to (e.g. v0.3.0). Leave empty to use ref_name."
        required: false
        default: ""

permissions:
  contents: write
  id-token: write

env:
  # Use the input tag when provided, otherwise use the ref tag name.
  RELEASE_TAG: "${{ inputs.tag != '' && inputs.tag || github.ref_name }}"

jobs:
  build-matrix:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-14
          - windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build deps
        shell: bash
        run: |
          python -m pip install -U pip wheel build pex setuptools

      - name: Build wheel
        shell: bash
        run: |
          python -m build -w -n
          ls -l dist

      - name: Build PEX and ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          WHL="$(ls dist/*.whl | head -n1)"
          echo "Using wheel: $WHL"

          if [ "${{ runner.os }}" = "Linux" ]; then
            python -m pex "$WHL" -c quietpatch --find-links dist --no-build --strip-pex-env -o dist/quietpatch-linux-x86_64.pex
            zip -j dist/quietpatch-linux-x86_64.zip dist/quietpatch-linux-x86_64.pex packaging/linux/run_quietpatch.sh packaging/linux/README-Linux.txt
          elif [ "${{ runner.os }}" = "macOS" ]; then
            python -m pex "$WHL" -c quietpatch --find-links dist --no-build --strip-pex-env -o dist/quietpatch-macos-arm64.pex
            zip -j dist/quietpatch-macos-arm64.zip dist/quietpatch-macos-arm64.pex packaging/macos/run_quietpatch.command packaging/macos/README-macOS.txt
          else
            py -3.11 -m pex "$WHL" -c quietpatch --find-links dist --no-build --strip-pex-env -o dist/quietpatch-windows-x64.pex
            pwsh -NoLogo -NoProfile -Command "Compress-Archive -Force -Path dist/quietpatch-windows-x64.pex, packaging/windows/run_quietpatch.bat, packaging/windows/README-Windows.txt -DestinationPath dist/quietpatch-windows-x64.zip"
          fi

          ls -l dist

      - name: Zero-unknowns gate
        shell: bash
        run: |
          set -euo pipefail

          workdir="$(mktemp -d)"
          sarif="$workdir/gate.sarif"

          echo "Running quietpatch scan → SARIF only…"
          if ! quietpatch scan --sarif "$sarif"; then
            echo "::warning::quietpatch scan returned non-zero; continuing to inspect SARIF output"
          fi

          if [ ! -s "$sarif" ]; then
            echo "::error::No SARIF produced by quietpatch"; exit 1
          fi

          if command -v jq >/dev/null 2>&1; then
            unknown_cnt="$(jq '
              [ .runs[]?.results[]?
                | ( .properties?.severity_label? // "" | ascii_downcase )
                | select(. == "unknown")
              ] | length
            ' "$sarif")"
            echo "Unknown findings: $unknown_cnt"
            if [ "${unknown_cnt:-0}" -gt 0 ]; then
              echo "::error::Unknown severities detected ($unknown_cnt). Failing gate."
              jq -r '
                .runs[]?.results[]?
                | select((.properties?.severity_label? // "" | ascii_downcase) == "unknown")
                | "\(.ruleId // \"rule?\") - \(.message.text // \"unknown\")"
              ' "$sarif" | sed 's/^/::notice file=gate.sarif::/'
              exit 1
            fi
          else
            if grep -qi '"severity_label"[[:space:]]*:[[:space:]]*"unknown"' "$sarif"; then
              echo "::error::Unknown severities detected. Failing gate."; exit 1
            fi
          fi

          echo "Zero-unknowns gate passed ✅"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ runner.os }}-artifacts"
          path: dist/*.zip

  build-db:
    name: build db snapshot
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip wheel requests

      - name: Build offline DB snapshot
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          # Replace with your actual snapshot builder if different:
          python tools/db_snapshot.py --years-back 5 --out dist

          # Create checksums if any files exist
          ( cd dist && { sha256sum *.zip *.zst *.tar.zst 2>/dev/null || true; } ) > dist/SHA256SUMS || true
          ls -l dist

      - name: Upload DB artifact
        uses: actions/upload-artifact@v4
        with:
          name: "db-artifacts"
          path: dist/*

  publish:
    name: publish to release
    runs-on: ubuntu-22.04
    needs:
      - build-matrix
      - build-db
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        shell: bash
        run: |
          mkdir -p dist
          find artifacts -type f -print -exec cp {} dist/ \;
          ls -l dist

      - name: Generate SHA256SUMS
        shell: bash
        run: |
          cd dist
          # Generate checksums for all files except SHA256SUMS itself
          find . -type f ! -name "SHA256SUMS" -exec sha256sum {} \; > SHA256SUMS
          echo "Generated SHA256SUMS:"
          cat SHA256SUMS

      - name: Ensure release exists
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        shell: bash
        run: |
          set -e
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Release ${RELEASE_TAG} already exists"
          else
            gh release create "${RELEASE_TAG}" -t "${RELEASE_TAG}" -n "Automated release for ${RELEASE_TAG}"
          fi

      - name: Upload assets to release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        shell: bash
        run: |
          gh release upload "${RELEASE_TAG}" dist/* --clobber