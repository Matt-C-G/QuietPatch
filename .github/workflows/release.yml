name: Build & Release QuietPatch

on:
  push:
    branches: [ main, master ]
    tags: ['v*']         # <— tag pushes fire this workflow
  release:
    types: [published]   # <— publishing an existing draft fires this workflow
  workflow_dispatch: {}  # <— manual fallback

permissions:
  contents: write

env:
  PYVER: "3.12"
  OS_KEY: ${{ startsWith(matrix.os, 'ubuntu') && 'linux' || startsWith(matrix.os, 'macos') && 'macos' || 'windows' }}
  BUILD_CONSTRAINTS: constraints/build-${{ env.OS_KEY }}-py312.txt
  RUNTIME_CONSTRAINTS: constraints/runtime-${{ env.OS_KEY }}-py312.txt

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Debug event
        run: |
          echo "EVENT: ${{ github.event_name }}"
          echo "REF:   ${{ github.ref }}"
          echo "REF_NAME: ${{ github.ref_name }}"
          echo "SHA:   ${{ github.sha }}"

      - name: Set release tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python ${{ env.PYVER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYVER }}

      - name: Show effective constraints
        run: |
          echo "Build constraints: ${BUILD_CONSTRAINTS}"
          echo "Runtime constraints: ${RUNTIME_CONSTRAINTS}"
          python -V
          pip -V

      - name: Fail fast if constraints missing
        run: |
          test -f "${BUILD_CONSTRAINTS}" || (echo "Missing build constraints file"; exit 2)
          test -f "${RUNTIME_CONSTRAINTS}" || (echo "Missing runtime constraints file"; exit 2)

      - name: Verify linux lock includes SecretStorage
        if: matrix.os == 'ubuntu-latest'
        run: |
          grep -q '^SecretStorage==' constraints/runtime-linux-py312.txt || \
            (echo "linux constraints missing SecretStorage — recompile with --platform manylinux_2_28_x86_64"; exit 1)
          grep -q '^jeepney==' constraints/runtime-linux-py312.txt || \
            (echo "linux constraints missing jeepney — recompile"; exit 1)

      - name: Install build deps (hermetic)
        run: |
          python -m pip install --upgrade "pip<25"
          python -m pip install -r constraints/build-${{ env.OS_KEY }}-py312.txt

      - name: Install app deps (hermetic)
        run: |
          python -m pip install --requirement "${RUNTIME_CONSTRAINTS}" --require-hashes

      - name: Install PyInstaller
        run: |
          python -m pip install pyinstaller

      - name: Build wheel
        run: |
          python -m build -w -n

      - name: Build PyInstaller (GUI + CLI)
        run: |
          pyinstaller build/quietpatch_ci.spec

      - name: Package OS installer
        shell: bash
        run: |
          mkdir -p release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Install Inno Setup and 7zip
            choco install -y innosetup 7zip
            # Build installer
            "C:/Program Files (x86)/Inno Setup 6/ISCC.exe" installer/windows/QuietPatch.iss
            cp dist/windows/QuietPatch-Setup-v${{ steps.tag.outputs.tag }}.exe release/
            # Portable CLI
            cd dist
            if command -v 7z >/dev/null 2>&1; then
              7z a ../release/quietpatch-cli-v${{ steps.tag.outputs.tag }}-win64.zip quietpatch/*
            else
              powershell Compress-Archive -Path "quietpatch/*" -DestinationPath "../release/quietpatch-cli-v${{ steps.tag.outputs.tag }}-win64.zip" -Force
            fi
            cd ..
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # Install create-dmg
            brew install create-dmg || true
            # Create macOS app bundle
            mkdir -p dist/macos/QuietPatch.app/Contents/MacOS
            mkdir -p dist/macos/QuietPatch.app/Contents/Resources
            # Handle PyInstaller outputs
            if [[ -f dist/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard dist/macos/QuietPatch.app/Contents/MacOS/QuietPatch
            elif [[ -f dist/QuietPatchWizard/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard/QuietPatchWizard dist/macos/QuietPatch.app/Contents/MacOS/QuietPatch
            fi
            if [[ -f dist/quietpatch ]]; then
              cp dist/quietpatch dist/macos/QuietPatch.app/Contents/MacOS/quietpatch
            elif [[ -f dist/quietpatch/quietpatch ]]; then
              cp dist/quietpatch/quietpatch dist/macos/QuietPatch.app/Contents/MacOS/quietpatch
            fi
            # Create DMG
            create-dmg \
              --volname "QuietPatch ${{ steps.tag.outputs.tag }}" \
              --volicon "assets/quietpatch.icns" \
              --window-pos 200 120 \
              --window-size 600 300 \
              --icon-size 100 \
              --icon "QuietPatch.app" 175 120 \
              --hide-extension "QuietPatch.app" \
              --app-drop-link 425 120 \
              "release/QuietPatch-v${{ steps.tag.outputs.tag }}.dmg" \
              "dist/macos/"
            # Portable CLI
            cd dist
            tar -czf ../release/quietpatch-cli-v${{ steps.tag.outputs.tag }}-macos-universal.tar.gz quietpatch/
            cd ..
          else
            # Linux AppImage
            chmod +x dist/QuietPatchWizard
            chmod +x dist/quietpatch
            # Create AppImage (simplified)
            mkdir -p dist/appimage/QuietPatch.AppDir/usr/bin
            cp dist/QuietPatchWizard dist/appimage/QuietPatch.AppDir/usr/bin/
            cp dist/quietpatch dist/appimage/QuietPatch.AppDir/usr/bin/
            # Create AppImage metadata
            cat > dist/appimage/QuietPatch.AppDir/AppRun << 'EOF'
#!/bin/bash
HERE="$(dirname "$(readlink -f "${0}")")"
exec "${HERE}/usr/bin/QuietPatchWizard" "$@"
EOF
            chmod +x dist/appimage/QuietPatch.AppDir/AppRun
            # Create AppImage
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage
            ./appimagetool-x86_64.AppImage dist/appimage/QuietPatch.AppDir release/QuietPatch-v${{ steps.tag.outputs.tag }}-x86_64.AppImage
            # Portable CLI
            cd dist
            tar -czf ../release/quietpatch-cli-v${{ steps.tag.outputs.tag }}-linux-x86_64.tar.gz quietpatch/
            cd ..
          fi

      - name: Locate artifacts
        if: success()
        shell: bash
        run: |
          echo "=== Release artifacts ==="
          ls -la release/
          echo "=== Dist contents ==="
          ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quietpatch-${{ env.OS_KEY }}-${{ steps.tag.outputs.tag }}
          path: release/
          retention-days: 30

  release-gates:
    name: Release Gates
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Set release tag
        id: tag
        shell: bash
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Python ${{ env.PYVER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYVER }}

      - name: Install build deps (hermetic)
        run: |
          python -m pip install --upgrade "pip<25"
          python -m pip install -r constraints/build-linux-py312.txt

      - name: Install app deps (hermetic)
        run: |
          python -m pip install --requirement constraints/runtime-linux-py312.txt --require-hashes

      - name: Build wheel
        run: |
          python -m build -w -n

      - name: Locate wheel
        if: success()
        shell: bash
        run: |
          echo "=== Wheel contents ==="
          ls -la dist/
          if [[ -f dist/*.whl ]]; then
            echo "Wheel found:"
            ls -la dist/*.whl
          else
            echo "No wheel found in dist/"
            exit 1
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: QuietPatch ${{ steps.tag.outputs.tag }}
          body: |
            ## QuietPatch ${{ steps.tag.outputs.tag }}
            
            Download the installer for your platform:
            - **Windows**: QuietPatch-Setup-v${{ steps.tag.outputs.tag }}.exe
            - **macOS**: QuietPatch-v${{ steps.tag.outputs.tag }}.dmg
            - **Linux**: QuietPatch-v${{ steps.tag.outputs.tag }}-x86_64.AppImage
            
            Portable CLI versions also available.
            
            See [VERIFY.md](VERIFY.md) for verification instructions.
          files: |
            quietpatch-linux-v${{ steps.tag.outputs.tag }}/release/*
            quietpatch-macos-v${{ steps.tag.outputs.tag }}/release/*
            quietpatch-windows-v${{ steps.tag.outputs.tag }}/release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}