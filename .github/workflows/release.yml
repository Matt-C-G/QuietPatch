name: Build & Release QuietPatch v0.4.0s

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v0.4.0)"
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set release tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build deps
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel setuptools
          # Use platform-specific constraints if you have them; fallback to requirements.txt
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pip install -r constraints/runtime-windows-py312.txt -c constraints.txt || pip install -r requirements.txt
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            pip install -r constraints/runtime-macos-py312.txt -c constraints.txt || pip install -r requirements.txt
          else
            pip install -r constraints/runtime-linux-py312.txt -c constraints.txt || pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Build PyInstaller (GUI + CLI)
        shell: bash
        run: |
          pyinstaller build/quietpatch_wizard.spec
          pyinstaller build/quietpatch_cli.spec

      - name: Package OS installer
        shell: bash
        run: |
          mkdir -p release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Install Inno Setup and 7zip
            choco install -y innosetup 7zip
            # Build installer
            "C:/Program Files (x86)/Inno Setup 6/ISCC.exe" installer/windows/QuietPatch.iss
            cp dist/windows/QuietPatch-Setup-v0.4.0.exe release/
            # Portable CLI (fallback) - use 7z if available, else PowerShell
            cd dist
            if command -v 7z >/dev/null 2>&1; then
              7z a ../release/quietpatch-cli-v0.4.0-win64.zip quietpatch/*
            else
              powershell Compress-Archive -Path "quietpatch/*" -DestinationPath "../release/quietpatch-cli-v0.4.0-win64.zip" -Force
            fi
            cd ..
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # Install create-dmg
            brew install create-dmg || true
            # Debug: print dist structure
            echo "=== dist tree ==="; ls -la dist; (command -v tree >/dev/null && tree -L 2 dist) || true
            # Create macOS app bundle
            mkdir -p dist/macos/QuietPatch.app/Contents/MacOS
            mkdir -p dist/macos/QuietPatch.app/Contents/Resources
            # Handle both onefile and one-folder PyInstaller outputs
            if [[ -f dist/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard dist/macos/QuietPatch.app/Contents/MacOS/QuietPatch
            elif [[ -f dist/QuietPatchWizard/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard/QuietPatchWizard dist/macos/QuietPatch.app/Contents/MacOS/QuietPatch
            fi
            if [[ -f dist/quietpatch ]]; then
              cp dist/quietpatch dist/macos/QuietPatch.app/Contents/MacOS/quietpatch
            elif [[ -f dist/quietpatch/quietpatch ]]; then
              cp dist/quietpatch/quietpatch dist/macos/QuietPatch.app/Contents/MacOS/quietpatch
            fi
            # Create Info.plist
            cat > dist/macos/QuietPatch.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>QuietPatch</string>
              <key>CFBundleIdentifier</key>
              <string>com.quietpatch.quietpatch</string>
              <key>CFBundleName</key>
              <string>QuietPatch</string>
              <key>CFBundleVersion</key>
              <string>0.4.0</string>
              <key>CFBundleShortVersionString</key>
              <string>0.4.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
          </dict>
          </plist>
          EOF
            # Create DMG
            ./packaging/macos/create_dmg.sh
            cp dist/macos/QuietPatch-v0.4.0.dmg release/
            # Fallback portable CLI
            tar -C dist -czf release/quietpatch-cli-v0.4.0-macos-universal.tar.gz quietpatch
          else
            # Linux AppImage packaging
            sudo apt-get update && sudo apt-get install -y libfuse2 wget
            wget -q https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage -O appimagetool
            chmod +x appimagetool
            # Debug: print dist structure
            echo "=== dist tree ==="; ls -la dist; (command -v tree >/dev/null && tree -L 2 dist) || true
            # Create AppDir
            mkdir -p AppDir/usr/bin
            # Handle both onefile and one-folder PyInstaller outputs
            if [[ -f dist/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard AppDir/usr/bin/QuietPatch
            elif [[ -f dist/QuietPatchWizard/QuietPatchWizard ]]; then
              cp dist/QuietPatchWizard/QuietPatchWizard AppDir/usr/bin/QuietPatch
            fi
            if [[ -f dist/quietpatch ]]; then
              cp dist/quietpatch AppDir/usr/bin/quietpatch
            elif [[ -f dist/quietpatch/quietpatch ]]; then
              cp dist/quietpatch/quietpatch AppDir/usr/bin/quietpatch
            fi
            # Create desktop file
            cat > AppDir/QuietPatch.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=QuietPatch
          Comment=Privacy-first patch advisor
          Exec=QuietPatch
          Icon=QuietPatch
          Categories=Utility;System;Security;
          StartupNotify=true
          Terminal=false
          EOF
            # Create AppRun
            cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/QuietPatch" "$@"
          EOF
            chmod +x AppDir/AppRun
            # Create icon if available
            if [ -f "assets/quietpatch.png" ]; then
              cp assets/quietpatch.png AppDir/QuietPatch.png
            fi
            # Create AppImage
            ./appimagetool AppDir QuietPatch-v0.4.0-x86_64.AppImage
            mv QuietPatch-v0.4.0-x86_64.AppImage release/
            # Portable CLI
            tar -C dist -czf release/quietpatch-cli-v0.4.0-linux-x86_64.tar.gz quietpatch
          fi

      - name: Compute SHA256 for this OS
        shell: bash
        run: |
          cd release
          if command -v sha256sum >/dev/null 2>&1; then CMD=sha256sum; else CMD="shasum -a 256"; fi
          $CMD * > SHA256.${{ runner.os }}.txt

      - name: Upload OS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ runner.os }}
          path: release/*

  finalize:
    name: Sign & Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare combined release folder
        run: |
          mkdir -p release
          cp -r artifacts/*/* release/
          ls -la release

      - name: Generate combined SHA256SUMS.txt
        run: |
          cd release
          # Hash everything we might ship; print the list for debugging
          ls -1
          sha256sum * > SHA256SUMS.txt

      - name: Install minisign
        run: |
          sudo apt-get update && sudo apt-get install -y minisign

      - name: Write minisign secret key
        env:
          MINISIGN_SECRET_KEY_B64: ${{ secrets.MINISIGN_SECRET_KEY_B64 }}
        run: |
          echo "$MINISIGN_SECRET_KEY_B64" | base64 -d > minisign.key
          chmod 600 minisign.key

      - name: Sign checksums
        run: |
          cd release
          minisign -Sm SHA256SUMS.txt -s ../minisign.key

      - name: Upload GitHub Release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag || github.ref_name }}
          files: |
            release/QuietPatch-Setup-v0.4.0.exe
            release/quietpatch-cli-v0.4.0-win64.zip
            release/QuietPatch-v0.4.0.dmg
            release/quietpatch-cli-v0.4.0-macos-universal.tar.gz
            release/QuietPatch-v0.4.0-x86_64.AppImage
            release/quietpatch-cli-v0.4.0-linux-x86_64.tar.gz
            release/SHA256SUMS.txt
            release/SHA256SUMS.txt.minisig
            VERIFY.md
            LICENSE.txt
            README-QuickStart.md
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}