name: Release

on:
  push:
    tags: ['v*']           # tag like v0.4.2
  release:
    types: [published]     # when you click "Publish release"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g. v0.4.2)'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.workflow }}-${{ github.event.release.tag_name || github.ref_name || inputs.tag || github.sha }}
  cancel-in-progress: false

jobs:
  build-upload:
    # Don't run on plain branch pushes
    if: >
      github.event_name == 'release' ||
      startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'workflow_dispatch'

    name: Build & Upload (${{ matrix.os }}, py${{ env.PYVER }}, ${{ matrix.build_constraints }}, ${{ matrix.runtime_constraints }})
    runs-on: ${{ matrix.os }}

    env:
      PYVER: "3.12"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_constraints: constraints/build-linux-py312.txt
            runtime_constraints: constraints/runtime-linux-py312.txt
          - os: macos-latest
            build_constraints: constraints/build-macos-py312.txt
            runtime_constraints: constraints/runtime-macos-py312.txt
          - os: windows-latest
            build_constraints: constraints/build-windows-py312.txt
            runtime_constraints: constraints/runtime-windows-py312.txt

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensure tags are present

      - name: Debug event
        run: |
          echo "EVENT: ${{ github.event_name }}"
          echo "REF:   ${{ github.ref }}"
          echo "SHA:   ${{ github.sha }}"
          echo "REF_NAME: ${{ github.ref_name || '' }}"
          echo "RELEASE TAG: ${{ github.event.release.tag_name || '' }}"
          echo "DISPATCH TAG: ${{ inputs.tag || '' }}"

      - name: Resolve tag to build
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          tag=""
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            tag="${{ github.event.release.tag_name }}"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]] && [[ -n "${{ inputs.tag }}" ]]; then
            tag="${{ inputs.tag }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            tag="${GITHUB_REF#refs/tags/}"
          fi

          if [[ -z "$tag" ]]; then
            echo "This run is not associated with a tag; skipping build steps."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag=$tag" >> "$GITHUB_OUTPUT"
            echo "TAG=$tag" >> "$GITHUB_ENV"
            echo "Resolved tag: $tag"
          fi

      - name: Set up Python ${{ env.PYVER }}
        if: steps.tag.outputs.skip != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYVER }}

      - name: Upgrade pip (pin)
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install --upgrade "pip<25"

      - name: Install build deps (toolchain, no hashes)
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install -r ${{ matrix.build_constraints }}

      - name: Install runtime deps (hermetic constraints)
        if: steps.tag.outputs.skip != 'true'
        run: python -m pip install -r ${{ matrix.runtime_constraints }}

      - name: Build wheel & sdist
        if: steps.tag.outputs.skip != 'true'
        run: |
          python -m build -w -s
          ls -l dist

      # ── Optional: keep your platform packaging here (PyInstaller, dmg, exe, etc.) ──
      # - name: Build app bundle
      #   if: steps.tag.outputs.skip != 'true'
      #   run: |
      #     <your packaging commands>
      #     ls -l build || true

      - name: Smoke test (fresh venv, import & CLI)
        if: steps.tag.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          python -m venv venv
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PY=venv/Scripts/python.exe
            PIP=venv/Scripts/pip.exe
          else
            PY=venv/bin/python
            PIP=venv/bin/pip
          fi

          # Install runtime deps from constraints, then install the wheel we just built
          $PIP install -r ${{ matrix.runtime_constraints }}
          WHL="$($PY - <<'PY'
import glob, sys
files = sorted(glob.glob('dist/*.whl'))
print(files[0] if files else '')
PY
)"
          test -n "$WHL" || { echo "No wheel found in dist/"; exit 1; }
          echo "Installing $WHL"
          $PIP install "$WHL"

          echo "---- Import test ----"
          $PY - <<'PY'
import quietpatch, sys
print("quietpatch.__version__ =", getattr(quietpatch, "__version__", "unknown"))
PY

          echo "---- CLI smoke ----"
          if command -v quietpatch >/dev/null 2>&1; then
            quietpatch --help >/dev/null
            quietpatch scan --mock --offline >/dev/null
          else
            echo "quietpatch CLI not found; skipping CLI smoke."
          fi

      - name: Generate SHA256SUMS.txt
        if: steps.tag.outputs.skip != 'true'
        run: |
          python - <<'PY'
import hashlib, pathlib, sys
paths = [*pathlib.Path("dist").glob("*")]
out = pathlib.Path("SHA256SUMS.txt")
with out.open("w", encoding="utf-8") as f:
    for p in sorted(paths):
        h = hashlib.sha256(p.read_bytes()).hexdigest()
        f.write(f"{h}  {p.as_posix()}\n")
print(out.read_text())
PY

      - name: Upload artifacts to GitHub Release
        if: steps.tag.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          fail_on_unmatched_files: true
          files: |
            dist/*.whl
            dist/*.tar.gz
            SHA256SUMS.txt
            build/**/*