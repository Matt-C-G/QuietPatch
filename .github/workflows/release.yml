name: release

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch:

env:
  PY_VER: "3.11"

jobs:
  win:
    name: build-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          architecture: "x64"
      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install -U pip wheel setuptools pex
          python -m pip install -e .
      - name: Build PEX
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item dist -Recurse -Force }
          mkdir dist
          python -m pex -D . -r requirements.pex.txt `
            --interpreter-constraint 'CPython>=3.11,<3.14' `
            -m qp_cli:main `
            -o dist/quietpatch-win-py311.pex
      - name: Package
        shell: pwsh
        run: |
          echo '@echo off' > dist/run_quietpatch.bat
          echo 'setlocal' >> dist/run_quietpatch.bat
          echo 'set PEX_ROOT=%~dp0.pexroot' >> dist/run_quietpatch.bat
          echo 'set TMP=%~dp0.tmp' >> dist/run_quietpatch.bat
          echo 'set TEMP=%~dp0.tmp' >> dist/run_quietpatch.bat
          echo 'where py >nul 2>&1 || (echo Install Python 3.11 (64-bit) and retry.& exit /b 86)' >> dist/run_quietpatch.bat
          echo 'py -3.11 "%~dp0quietpatch-win-py311.pex" %*' >> dist/run_quietpatch.bat
          echo 'endlocal' >> dist/run_quietpatch.bat
          echo 'QuietPatch (Windows)' > dist/README-Windows.txt
          echo 'Requirements: Python 3.11 (64-bit)' >> dist/README-Windows.txt
          echo 'Run: double-click run_quietpatch.bat' >> dist/README-Windows.txt
          echo 'Report: .\reports\quietpatch_report.html' >> dist/README-Windows.txt
          if (Test-Path catalog) { Copy-Item -Recurse catalog dist/catalog }
          if (Test-Path policies) { Copy-Item -Recurse policies dist/policies }
      - name: Zip
        shell: pwsh
        run: |
          $ver = $env:GITHUB_REF_NAME -replace '^v', ''
          New-Item -ItemType Directory -Path release -Force | Out-Null
          Compress-Archive -Path dist\* -DestinationPath "release\quietpatch-${ver}-windows.zip" -Force
      - uses: actions/upload-artifact@v4
        with:
          name: win-zip
          path: release/*.zip

  linux:
    name: build-linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools pex
          python -m pip install -e .
      - name: Build PEX
        run: |
          mkdir -p dist
          python -m pex -D . -r requirements.pex.txt \
            --interpreter-constraint 'CPython>=3.11,<3.14' \
            -m qp_cli:main \
            -o dist/quietpatch-linux-x86_64-py311.pex
      - name: Package
        run: |
          cat > dist/run_quietpatch.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          export PEX_ROOT="$(dirname "$0")/.pexroot"
          exec /usr/bin/env python3.11 "$(dirname "$0")/quietpatch-linux-x86_64-py311.pex" "$@"
          EOF
          chmod +x dist/run_quietpatch.sh
          echo 'QuietPatch (Linux)' > dist/README-Linux.txt
          echo 'Requirements: Python 3.11.' >> dist/README-Linux.txt
          echo 'Run:' >> dist/README-Linux.txt
          echo '  chmod +x run_quietpatch.sh' >> dist/README-Linux.txt
          echo '  ./run_quietpatch.sh scan' >> dist/README-Linux.txt
          echo 'Report: ./reports/quietpatch_report.html' >> dist/README-Linux.txt
          if [ -d catalog ]; then cp -r catalog dist/catalog; fi
          if [ -d policies ]; then cp -r policies dist/policies; fi
      - name: Zip
        run: |
          ver="${GITHUB_REF_NAME#v}"
          mkdir -p release
          (cd dist && zip -r9 "../release/quietpatch-${ver}-linux-x86_64.zip" .)
      - uses: actions/upload-artifact@v4
        with:
          name: linux-zip
          path: release/*.zip

  macos:
    name: build-macos
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools pex
          python -m pip install -e .
      - name: Build PEX
        run: |
          mkdir -p dist
          python -m pex -D . -r requirements.pex.txt \
            --interpreter-constraint 'CPython>=3.11,<3.14' \
            -m qp_cli:main \
            -o dist/quietpatch-macos-arm64-py311.pex
      - name: Package
        run: |
          cat > dist/run_quietpatch.command << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          export PEX_ROOT="$(dirname "$0")/.pexroot"
          exec /usr/bin/env python3.11 "$(dirname "$0")/quietpatch-macos-arm64-py311.pex" "$@"
          EOF
          chmod +x dist/run_quietpatch.command
          echo 'QuietPatch (macOS, Apple Silicon)' > dist/README-macOS.txt
          echo 'Requirements: Python 3.11 (brew install python@3.11).' >> dist/README-macOS.txt
          echo 'Run: double-click run_quietpatch.command' >> dist/README-macOS.txt
          echo 'Report: ./reports/quietpatch_report.html' >> dist/README-macOS.txt
          if [ -d catalog ]; then cp -r catalog dist/catalog; fi
          if [ -d policies ]; then cp -r policies dist/policies; fi
      - name: Zip
        run: |
          ver="${GITHUB_REF_NAME#v}"
          mkdir -p release
          (cd dist && zip -r9 "../release/quietpatch-${ver}-macos-arm64.zip" .)
      - uses: actions/upload-artifact@v4
        with:
          name: mac-zip
          path: release/*.zip

  db-snapshot:
    name: build-db-snapshot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install -e .
      - name: Build DB snapshot
        run: |
          mkdir -p dist
          python tools/db_snapshot.py --years-back 5 --out dist
          cd dist
          sha256sum db-*.tar.zst > db-*.tar.zst.sha256
      - uses: actions/upload-artifact@v4
        with:
          name: db-snapshot
          path: dist/db-*.tar.zst*

  publish:
    name: publish
    needs: [win, linux, macos, db-snapshot]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*-zip"
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: db-snapshot
      - name: Checksums
        run: |
          ls -l
          sha256sum *.zip > SHA256SUMS
      - name: Minisign sign (optional but recommended)
        if: ${{ secrets.MINISIGN_SECRET_KEY != '' }}
        env:
          MINISIGN_SECRET_KEY: ${{ secrets.MINISIGN_SECRET_KEY }}
        run: |
          echo "$MINISIGN_SECRET_KEY" > key.txt
          docker run --rm -v "$PWD:/w" -w /w ghcr.io/jedisct1/minisign minisign -S -s key.txt -m SHA256SUMS
          rm -f key.txt
      - name: Create VERIFY.md
        run: |
          cat > VERIFY.md << 'EOF'
          # Verify QuietPatch release
          
          ## 1) Verify checksums
          - **Linux/macOS**
            ```sh
            sha256sum -c SHA256SUMS
            ```
          - **Windows (PowerShell)**
            ```powershell
            Get-Content .\SHA256SUMS
            # For a single file:
            Get-FileHash .\quietpatch-<ver>-windows.zip -Algorithm SHA256
            ```
          
          ## 2) Verify signature (if provided)
          Install minisign:
          - **macOS**: `brew install minisign`
          - **Linux**: `sudo apt install minisign` or equivalent
          - **Windows**: Download `minisign.exe`
          
          Verify:
          ```sh
          minisign -Vm SHA256SUMS -P <YOUR_PUBLIC_KEY>
          ```
          
          **If checksum or signature fails: do not run the binariesâ€”re-download from the Release page.**
          EOF
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.zip
            db-*.tar.zst*
            SHA256SUMS
            SHA256SUMS.minisig
            VERIFY.md
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Downloads
            - **Windows (Python 3.11 required)**: `quietpatch-${{ github.ref_name }}-windows.zip`
            - **Linux x86_64 (Python 3.11 required)**: `quietpatch-${{ github.ref_name }}-linux-x86_64.zip`
            - **macOS arm64 (Python 3.11 required)**: `quietpatch-${{ github.ref_name }}-macos-arm64.zip`
            - **Offline DB Snapshot**: `db-*.tar.zst` (includes SHA256 checksums)

            ## What's New
            - **Enhanced CVE Mapping**: Improved vulnerability detection with local database support
            - **Actionable Reports**: Each vulnerability now includes remediation steps and severity information
            - **Cross-Platform Support**: Native builds for Windows, Linux, and macOS
            - **Offline Operation**: Works completely offline with local vulnerability database
            - **Deterministic Outputs**: Consistent reports across multiple runs

            ## Installation & Usage

            ### Windows
            1. Install Python 3.11 (64-bit)
            2. Extract the Windows ZIP
            3. Double-click `run_quietpatch.bat`
            4. View report at `.\reports\quietpatch_report.html`

            ### Linux
            1. Install Python 3.11
            2. Extract the Linux ZIP
            3. Run: `chmod +x run_quietpatch.sh && ./run_quietpatch.sh scan`
            4. View report at `./reports/quietpatch_report.html`

            ### macOS
            1. Install Python 3.11 (`brew install python@3.11`)
            2. Extract the macOS ZIP
            3. Double-click `run_quietpatch.command`
            4. View report at `./reports/quietpatch_report.html`

            ## Notes
            - **Offline by default**. No telemetry or network communication required.
            - **Report location**: `./reports/quietpatch_report.html`
            - **Windows path-length errors**: Always launch via `run_quietpatch.bat` to avoid WinError 206.
            - **Security**: All builds are reproducible and include SHA256 checksums for verification.

            ## Technical Details
            - Built with Python 3.11 and PEX for maximum compatibility
            - Uses local CVE database for offline operation
            - Includes comprehensive vulnerability metadata (CVSS, KEV, EPSS)
            - Deterministic builds ensure reproducible results

            ## Support
            For issues, feature requests, or questions, please visit the [GitHub repository](https://github.com/Matt-C-G/QuietPatch).

