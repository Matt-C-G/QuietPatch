name: release-gates
on:
  workflow_dispatch:

env:
  QP_OFFLINE: "1"

jobs:
  gates:
    runs-on: macos-14
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prep toolchain
        shell: bash
        run: |
          python -m pip install --upgrade "pip<25"
          python -m pip install --no-deps setuptools wheel build pyproject-hooks

      - name: Install with constraints (hermetic)
        shell: bash
        run: |
          # If you meant your macOS runtime constraints, point to that file instead of "constraints.txt"
          # python -m pip install -r constraints/runtime-macos-py312.txt
          python -m pip install -r constraints.txt
          python -m pip install -r requirements.ci.txt -r requirements-ci.txt

      - name: Clean & build wheel
        shell: bash
        run: |
          rm -rf build/ dist/ ./*.egg-info
          pyproject-build -w -s -n

      - name: Install built wheel for testing
        run: |
          python -m pip install --no-deps --force-reinstall dist/quietpatch-*.whl

      - name: Run unit tests
        run: |
          pytest -q tests
          
      - name: Build offline DB fixture if missing
        run: |
          mkdir -p data/db

      - name: Test database refresh from local feed
        run: |
          python3 tools/make_manifest.py --src data/db --out _feed --version "test-$(date +%F)" --gzip
          python3 qp_cli.py db refresh --mirror "file://$PWD/_feed"
          test -f data/db/manifest.json

      - name: Zero-unknowns gate (mock, offline, capped)
        shell: bash
        run: |
          set -euo pipefail

          workdir="$(mktemp -d)"
          sarif="$workdir/gate.sarif"

          echo "Running quietpatch scan (mock) → SARIF only…"
          # Use gtimeout on macOS (from coreutils) or timeout on Linux
          if command -v gtimeout >/dev/null 2>&1; then
            TIMEOUT_CMD="gtimeout"
          elif command -v timeout >/dev/null 2>&1; then
            TIMEOUT_CMD="timeout"
          else
            # Fallback: run without timeout
            TIMEOUT_CMD=""
          fi

          if [ -n "$TIMEOUT_CMD" ]; then
            if ! $TIMEOUT_CMD 90s quietpatch scan --mock --offline --fail-unknowns --sarif "$sarif"; then
              echo "::error::Scan failed or exceeded 90s. Failing fast."; exit 1
            fi
          else
            if ! quietpatch scan --mock --offline --fail-unknowns --sarif "$sarif"; then
              echo "::error::Scan failed. Failing fast."; exit 1
            fi
          fi

          if [ ! -s "$sarif" ]; then
            echo "::error::No SARIF produced by quietpatch"; exit 1
          fi

          echo "Zero-unknowns gate passed ✅"

      - name: Selfcheck (strict)
        env:
          QP_OFFLINE: "1"
          QP_DISABLE_AUTO_SYNC: "1"
        run: |
          python tools/selfcheck.py --strict

      - name: Coverage gate
        run: |
          set -e
          if [ ! -f data/vuln_log.json ]; then
            echo "Creating minimal test vuln_log.json for gates"
            mkdir -p data
            echo '[{"name": "test-app", "vulnerabilities": [{"cve_id": "CVE-2023-1234"}]}]' > data/vuln_log.json
          fi
          python3 tools/check_coverage.py

      - name: Install project (force reinstall)
        run: |
          python -m pip install -e . --force-reinstall

      - name: Gate (mock scan with timeout - macOS)
        env:
          QP_OFFLINE: "1"
        run: |
          python - <<'PY'
          import subprocess, sys, time
          p = subprocess.Popen(["python3.12", "-m", "quietpatch.cli", "scan", "--mock", "--offline", "--fail-unknowns", "--sarif", "out.sarif"])
          for _ in range(90):
              if p.poll() is not None: 
                  sys.exit(p.returncode)
              time.sleep(1)
          p.kill()
          sys.exit(1)
          PY
          # Verify SARIF exists and is valid
          if [ ! -f out.sarif ] || [ ! -s out.sarif ]; then
            echo "Error: SARIF file missing or empty"
            exit 1
          fi
          echo "SARIF file size: $(wc -c < out.sarif) bytes"

      - name: Upload SARIF
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule'
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: out.sarif