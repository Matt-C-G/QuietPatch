name: Regenerate Constraints

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false   # let the PR action manage auth
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Pin packaging stack (pip <25 + pip-tools 7.4.x)
        run: |
          python -m pip install --upgrade "pip<25" "pip-tools>=7.4,<7.5" build

      # Linux runtime (already working)
      - if: matrix.os == 'ubuntu-latest'
        name: Compile Linux runtime constraints
        run: |
          mkdir -p constraints
          cat > constraints/linux-extra.in << 'EOF'
          # ensure linux-only keyring deps are pinned with hashes
          secretstorage
          jeepney
          EOF

          pip-compile \
            --generate-hashes \
            --resolver=backtracking \
            --strip-extras \
            --output-file constraints/runtime-linux-py312.txt \
            pyproject.toml constraints/linux-extra.in

      # Windows runtime (new)
      - if: matrix.os == 'windows-latest'
        name: Compile Windows runtime constraints
        run: |
          mkdir -p constraints
          pip-compile \
            --generate-hashes \
            --resolver=backtracking \
            --strip-extras \
            --output-file constraints/runtime-windows-py312.txt \
            pyproject.toml constraints/windows-extra.in
      
      # Verify the critical pins exist
      - if: matrix.os == 'windows-latest'
        name: Verify pywin32-ctypes is pinned
        shell: bash
        run: grep -i '^pywin32-ctypes==' constraints/runtime-windows-py312.txt

      - if: matrix.os == 'ubuntu-latest'
        name: Verify SecretStorage/jeepney are pinned
        shell: bash
        run: |
          grep -iq '^secretstorage==' constraints/runtime-linux-py312.txt
          grep -iq '^jeepney=='       constraints/runtime-linux-py312.txt

      - if: matrix.os == 'ubuntu-latest'
        name: Verify Linux pins have hashes
        run: |
          python - <<'PY'
          import pathlib, sys
          p = pathlib.Path("constraints/runtime-linux-py312.txt")
          t = [ln.rstrip().lower() for ln in p.read_text().splitlines()]
          def check(pkg: str):
              i = next((k for k,ln in enumerate(t) if ln.startswith(f"{pkg}==")), None)
              if i is None:
                  print(f"missing pin: {pkg}", file=sys.stderr); sys.exit(1)
              j = i + 1
              found = False
              while j < len(t):
                  ln = t[j].lstrip()
                  if ln.startswith("--hash="):
                      found = True; break
                  if ln and not ln.startswith(("#","--hash=")):
                      break   # next requirement reached
                  j += 1
              if not found:
                  print(f"missing --hash lines for {pkg}", file=sys.stderr); sys.exit(1)
          for pkg in ("secretstorage", "jeepney"):
              check(pkg)
          print("✅ Both SecretStorage and jeepney are properly pinned with hashes")
          PY

      - if: matrix.os == 'windows-latest'
        name: Verify Windows pins have hashes
        run: |
          python - <<'PY'
          import pathlib, sys
          p = pathlib.Path("constraints/runtime-windows-py312.txt")
          t = [ln.rstrip().lower() for ln in p.read_text().splitlines()]
          def check(pkg: str):
              i = next((k for k,ln in enumerate(t) if ln.startswith(f"{pkg}==")), None)
              if i is None:
                  print(f"missing pin: {pkg}", file=sys.stderr); sys.exit(1)
              j = i + 1
              found = False
              while j < len(t):
                  ln = t[j].lstrip()
                  if ln.startswith("--hash="):
                      found = True; break
                  if ln and not ln.startswith(("#","--hash=")):
                      break   # next requirement reached
                  j += 1
              if not found:
                  print(f"missing --hash lines for {pkg}", file=sys.stderr); sys.exit(1)
          for pkg in ("pywin32-ctypes",):
              check(pkg)
          print("✅ pywin32-ctypes is properly pinned with hashes")
          PY
      
      - name: Show diff
        run: |
          echo "=== Generated constraints file ==="
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            head -20 constraints/runtime-linux-py312.txt
            echo "..."
            tail -10 constraints/runtime-linux-py312.txt
          else
            head -20 constraints/runtime-windows-py312.txt
            echo "..."
            tail -10 constraints/runtime-windows-py312.txt
          fi

      # Commit/PR only when there are changes
      - name: Check for changes
        id: diff
        shell: bash
        run: |
          git status --porcelain constraints/ > /tmp/changes.txt
          if [ -s /tmp/changes.txt ]; then echo "changed=true" >> $GITHUB_OUTPUT; else echo "changed=false" >> $GITHUB_OUTPUT; fi

      - if: steps.diff.outputs.changed == 'true'
        name: Create PR with regenerated constraints
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CONSTRAINTS_PR_TOKEN }}  # <-- use PAT, not GITHUB_TOKEN
          commit-message: "ci: regenerate constraints (py312, ${{ matrix.os }})"
          branch: "chore/constraints-py312-${{ matrix.os }}-${{ github.run_id }}"
          title: "ci: regenerate constraints (py312, ${{ matrix.os }})"
          add-paths: |
            constraints/runtime-linux-py312.txt
            constraints/runtime-windows-py312.txt
          labels: ci
