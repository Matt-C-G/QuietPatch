name: Regenerate Constraints

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false   # let the PR action manage auth
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Pin packaging stack (pip <25 + pip-tools 7.4.x)
        run: |
          python -m pip install --upgrade "pip<25" "pip-tools>=7.4,<7.5" build

      # Linux runtime (already working)
      - if: matrix.os == 'ubuntu-latest'
        name: Compile Linux runtime constraints
        run: |
          mkdir -p constraints
          cat > constraints/linux-extra.in << 'EOF'
          # ensure linux-only keyring deps are pinned with hashes
          secretstorage
          jeepney
          EOF

          pip-compile \
            --generate-hashes \
            --resolver=backtracking \
            --strip-extras \
            --output-file constraints/runtime-linux-py312.txt \
            pyproject.toml constraints/linux-extra.in

      # Windows runtime (new)
      - if: matrix.os == 'windows-latest'
        name: Compile Windows runtime constraints
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path constraints | Out-Null
          pip-compile `
            --generate-hashes `
            --resolver=backtracking `
            --strip-extras `
            --output-file constraints/runtime-windows-py312.txt `
            pyproject.toml constraints/windows-extra.in

      # Build constraints (all platforms)
      - if: matrix.os == 'ubuntu-latest'
        name: Compile build constraints (Linux)
        shell: bash
        run: |
          pip-compile --generate-hashes --resolver=backtracking \
            --output-file constraints/build-linux-py312.txt - <<'IN'
          pip<25
          setuptools<76
          build==1.3.0
          packaging==25.0
          pyproject-hooks==1.2.0
IN

      - if: matrix.os == 'macos-latest'
        name: Compile build constraints (macOS)
        shell: bash
        run: |
          pip-compile --generate-hashes --resolver=backtracking \
            --output-file constraints/build-macos-py312.txt - <<'IN'
          pip<25
          setuptools<76
          build==1.3.0
          packaging==25.0
          pyproject-hooks==1.2.0
IN

      - if: matrix.os == 'windows-latest'
        name: Compile build constraints (Windows)
        shell: pwsh
        run: >
          pip-compile --generate-hashes --resolver=backtracking
          --output-file constraints/build-windows-py312.txt
          --upgrade --allow-unsafe - <<'IN'
          pip<25
          setuptools<76
          build==1.3.0
          packaging==25.0
          pyproject-hooks==1.2.0
IN
      
      # Verify the critical pins exist
      - if: matrix.os == 'windows-latest'
        name: Verify pywin32-ctypes is pinned
        shell: bash
        run: grep -i '^pywin32-ctypes==' constraints/runtime-windows-py312.txt

      - if: matrix.os == 'ubuntu-latest'
        name: Verify SecretStorage/jeepney are pinned
        shell: bash
        run: |
          grep -iq '^secretstorage==' constraints/runtime-linux-py312.txt
          grep -iq '^jeepney=='       constraints/runtime-linux-py312.txt

      - if: matrix.os == 'ubuntu-latest'
        name: Verify Linux pins have hashes
        run: |
          python - <<'PY'
          import pathlib, sys
          p = pathlib.Path("constraints/runtime-linux-py312.txt")
          t = [ln.rstrip().lower() for ln in p.read_text().splitlines()]
          def check(pkg: str):
              i = next((k for k,ln in enumerate(t) if ln.startswith(f"{pkg}==")), None)
              if i is None:
                  print(f"missing pin: {pkg}", file=sys.stderr); sys.exit(1)
              j = i + 1
              found = False
              while j < len(t):
                  ln = t[j].lstrip()
                  if ln.startswith("--hash="):
                      found = True; break
                  if ln and not ln.startswith(("#","--hash=")):
                      break   # next requirement reached
                  j += 1
              if not found:
                  print(f"missing --hash lines for {pkg}", file=sys.stderr); sys.exit(1)
          for pkg in ("secretstorage", "jeepney"):
              check(pkg)
          print("âœ… Both SecretStorage and jeepney are properly pinned with hashes")
          PY

      - if: matrix.os == 'windows-latest'
        name: Verify Windows pins have hashes
        shell: pwsh
        run: |
          $files = @(
            "constraints/runtime-windows-py312.txt",
            "constraints/build-windows-py312.txt"
          )

          foreach ($f in $files) {
            # Lines that look like "pkg==x.y.z" with no "--hash="
            $bad = Select-String -Path $f -Pattern '^[A-Za-z0-9._-]+==[^#\s]+$' | ForEach-Object { $_.Line.Trim() }
            if ($bad.Count) {
              $nl = [Environment]::NewLine
              $msg = "Missing hashes in ${f}:${nl}" + ($bad -join $nl)
              Write-Error $msg
            }
          }
      
      - name: Show diff
        shell: bash
        run: |
          echo "=== Generated constraints file ==="
          git --no-pager diff --unified=0 -- constraints/ | cat

      # Commit/PR only when there are changes
      - name: Check for changes
        id: diff
        shell: bash
        run: |
          if git status --porcelain | grep -q '^ M\|^A\|^??'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - if: steps.diff.outputs.changed == 'true'
        name: Create PR with regenerated constraints
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/constraints-${{ runner.os }}-py312-${{ github.run_id }}
          title: "ci: regenerate constraints (${{ runner.os }}, py312)"
          commit-message: "ci: regenerate constraints (${{ runner.os }}, py312)"
          add-paths: |
            constraints/runtime-linux-py312.txt
            constraints/runtime-windows-py312.txt
            constraints/runtime-macos-py312.txt
            constraints/build-linux-py312.txt
            constraints/build-macos-py312.txt
            constraints/build-windows-py312.txt
